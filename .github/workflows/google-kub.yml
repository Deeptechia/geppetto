# Despliegue del contenedor en Kubernetes (GKE) en Google Cloud 
name: Build and Deploy to GKE
on:
  push:
    branches: [ "Staging" ]
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1
  SERVICE_NAME: cloud-run-jobs
  REPOSITORY: docker-repository
  IMAGE: geppetto
  CLUSTER_NAME: autopilot-cluster-1
  CLUSTER_ZONE: us-central1  # Ajusta la zona según corresponda
jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    # Configurar kubectl
    - name: Install kubectl
      run: |
        sudo apt-get update
        sudo apt-get install -y kubectl
    
    # Instalar gke-gcloud-auth-plugin
    #- name: Install gke-gcloud-auth-plugin
    #  run: |
    #    curl -O https://storage.googleapis.com/gke-gcloud-auth-plugin/linux_amd64/gke-gcloud-auth-plugin
    #    chmod +x gke-gcloud-auth-plugin
    #    sudo mv gke-gcloud-auth-plugin /usr/local/bin/gke-gcloud-auth-plugin
    
    # Autenticar en Google Cloud y obtener credenciales del clúster
    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: 'latest'
        service_account_key: '${{ secrets.GCLOUD_KEY_JSON }}'
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCLOUD_KEY_JSON }}'
        token_format: 'access_token'
    # Obtener credenciales del clúster GKE
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --zone ${{ env.CLUSTER_ZONE }} --project ${{ env.PROJECT_ID }}
    # Autenticar Docker con Google Artifact Registry
    - name: Authenticate Docker to Google Artifact Registry
      env:
        ACCESS_TOKEN: ${{ steps.auth.outputs.access_token }}
      run: |
        echo $ACCESS_TOKEN | docker login -u oauth2accesstoken --password-stdin us-central1-docker.pkg.dev
    # Compilar imagen Docker
    - name: Build Docker image
      run: |
        docker build . --platform linux/amd64 -t geppetto:latest \
        --tag us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}
    # Publicar imagen Docker
    - name: Publish
      run: |
        docker push us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}

    # Crear un archivo YAML para el deployment
    - name: Create Kubernetes deployment YAML
      run: |
        cat <<EOF > k8s-deployment.yaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: geppetto-stg
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: geppetto-stg
          template:
            metadata:
              labels:
                app: geppetto-stg
            spec:
              containers:
              - name: geppetto-stg
                image: us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}
                ports:
                - containerPort: 8080
        EOF
    
    # Desplegar el archivo de manifiesto YAML en Kubernetes
    - name: Apply deployment to Kubernetes
      run: |
        gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --zone ${{ env.CLUSTER_ZONE }} --project ${{ env.PROJECT_ID }}
        
    # Configurar kubectl
    - name: Install kubectl
      run: |
       sudo apt-get update
       sudo apt-get install -y kubectl   
        kubectl apply -f k8s-deployment.yaml
          
    # Exponer el servicio (opcional)
    - name: Expose Deployment (optional)
      run: |
        kubectl expose deployment geppetto-stg --type=LoadBalancer --port 80 --target-port 8080

    
    
    # Desplegar en Kubernetes
    #- name: Deploy to Kubernetes
    #  run: |
    #    gcloud components install gke-gcloud-auth-plugin
    #    export USE_GKE_GCLOUD_AUTH_PLUGIN=True
    #    kubectl set image deployment/${{ env.SERVICE_NAME }}=us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}
    # Exponer el servicio (opcional)
    #- name: Expose Deployment (optional)
    #  run: |
    #    kubectl expose deployment ${{ env.SERVICE_NAME }} --type=LoadBalancer --port 80 --target-port 8080
